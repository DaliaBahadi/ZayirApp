@*@page "/Visitor/Add"

@using ZayirApp.Data;

@inject VisitorService Visitor1Service
@inject ContactService ContService
@inject NavigationManager NavigationManager

<h3>Visitor</h3>

<fieldset>
    <legend>Add New Visitor</legend>
    <EditForm Model="visitor" OnValidSubmit="AddVisitor1">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="first-name">First Name:*</label>
            <InputText id="first-name" @bind-Value="visitor.FirstName" class="form-control" />
        </div>

        <div class="form-group">
            <label for="father-name">Father Name:</label>
            <InputText id="father-name" @bind-Value="visitor.FatherName" class="form-control" />
        </div>

        <div class="form-group">
            <label for="grandfather-name">Grandfather Name:</label>
            <InputText id="grandfather-name" @bind-Value="visitor.GrandfatherName" class="form-control" />
        </div>

        <div class="form-group">
            <label for="last-name">Last Name:*</label>
            <InputText id="last-name" @bind-Value="visitor.LastName" class="form-control" />
        </div>

        <div class="form-group">
            <label for="email" class="control-label">Email: </label>
            <InputText id="email" @bind-value="visitor.Email" class="form-control" placeholder="sam@example.com" />
            <ValidationMessage For="@(() => visitor.Email)" />
        </div>

        <div class="form-group">
            <label for="mobile">Mobile Number:*</label>
            <InputNumber id="mobile" @bind-Value="visitor.Mobile" class="form-control" />
        </div>

        <div class="form-group">
            <label for="NationalId">National Id:*</label>
            <InputNumber id="NationalId" @bind-Value="visitor.Document" class="form-control" />
        </div>

        <div class="form-group">
            <label for="birthDate">Date Of Birth:</label>
            <InputDate id="birthDate" @bind-Value="visitor.BirthDate" class="form-control" />
        </div>

        <label class="mr-2">Language: </label>

        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" id="arabic" name="language" value="Female" @onchange="SelectLanguage" checked />
            <label class="form-check-label" for="arabic">
                Arabic
            </label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" id="english" name="language" value="Male" @onchange="SelectLanguage" />
            <label class="form-check-label" for="english">
                English
            </label>
        </div>

        <label class="mr-2">Gender: </label>

        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" id="female" name="gender" value="Female" @onchange="SelectGender" checked />
            <label class="form-check-label" for="female">
                Female
            </label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" id="male" name="gender" value="Male" @onchange="SelectGender" />
            <label class="form-check-label" for="male">
                Male
            </label>
        </div>

        <div class="form-group">
            <label for="jobTitle">Job Title:</label>
            <InputText id="jobTitle" @bind-Value="visitor.JobTitle" class="form-control" />
        </div>

        <div class="form-group">
            <label for="company">Company:</label>
            <InputText id="company" @bind-Value="visitor.Company" class="form-control" />
        </div>

        <div class="form-group">
            <label for="carLicensePlate">Car License Plate:</label>
            <InputNumber id="carLicensePlate" @bind-Value="visitor.CarLicencePlate" class="form-control" />
        </div>

        <div class="form-group">
            <label for="clearanceLevel">Clearance Level:</label>
            <select @bind="visitor.ClearanceLevel" id="clearanceLevel" class="form-control">
                <option value="">Select a Level ...</option>
                @foreach (var clearanceLevel in Enum.GetNames(typeof(ClearanceLevel)))
                {
                    <option>@clearanceLevel</option>
                }
            </select>
        </div>

        <div class="file-field">
            <label for="NationalIdcopy">National Id copy:</label>

            <div class="file-path-wrapper">
                <input id="NationalIdcopy" class="file-path validate" type="text" placeholder="Upload your file">
            </div>

            <div class="btn btn-primary btn-sm float-left">
                <span>Choose file</span>
                <input type="file">
            </div>
        </div>

        <fieldset>
            <legend>Notification</legend>

            <div class="form-check">
                <InputCheckbox id="ischecked" @bind-Value="isChecked" class="form-check-input" />
                <label class="form-check-label" for="ischecked">Accept SMS Notification</label>
            </div>

            <div class="form-check">
                <InputCheckbox id="ischecked" @bind-Value="isChecked" class="form-check-input" />
                <label class="form-check-label" for="ischecked">Accept Email Notification</label>
            </div>

            <div class="form-check">
                <InputCheckbox id="ischecked" @bind-Value="isChecked" class="form-check-input" />
                <label class="form-check-label" for="ischecked">I agree to the Policy of the Organization</label>
            </div>

        </fieldset>

        <div class="mt-2"></div>

        <button type="submit" class="btn btn-outline-primary">Save</button>
        <a href="Visitor/List" class="btn btn-outline-secondary">Cancel</a>
    </EditForm>
</fieldset>

@code {

    Visitor visitor = new Visitor();

    private List<Visitor> visitors = new List<Visitor>();

    // Added because Inputcheckbox does not accept nullable variables
    private bool isChecked = false;

    // Check why product.categoryId does not bind
    //private string categoryId = String.Empty;

    // Execute when component starts / initializes
    protected override void OnInitialized()
    {
        visitors = Visitor1Service.GetVisitors();
    }

    // Used to handle customer gender using radio buttons
    Gender gender = Gender.Female;

    void SelectGender(ChangeEventArgs args)
    {
        Enum.TryParse(args.Value.ToString(), out gender);
    }

    Language language = Language.Arabic;

    private void SelectLanguage(ChangeEventArgs args)
    {
        Enum.TryParse(args.Value.ToString(), out language);
    }

    private void AddVisitor1()
    {
        // Update the product properties
        visitor.AcceptEmailNotification = isChecked;
        visitor.AcceptSMSNotification = isChecked;

        // Convert categoryId from string to int
        //if (!String.IsNullOrEmpty(visitorId))
        //{
        //    visitor.VisitorId = Int32.Parse(visitorId);
        //}

        Visitor1Service.AddNewVisitor(visitor);

        // To empty the form, find more elegant why
        visitor = new Visitor();

        //May navigate to the Visitor/List component
        NavigationManager.NavigateTo("Visitor/List");
    }
}*@